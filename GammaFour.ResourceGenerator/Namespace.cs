// <copyright file="Namespace.cs" company="Dark Bond, Inc.">
//    Copyright © 2016-2017 - Dark Bond, Inc.  All Rights Reserved.
// </copyright>
// <author>Donald Roy Airey</author>
namespace GammaFour.ResourceGenerator
{
    using System.Collections.Generic;
    using System.Xml.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    /// <summary>
    /// The root namespace.
    /// </summary>
    public class Namespace
    {
        /// <summary>
        /// The target class name;
        /// </summary>
        private string targetClassName;

        /// <summary>
        /// The target namespace;
        /// </summary>
        private string targetNamespace;

        /// <summary>
        /// The resource schema.
        /// </summary>
        private XDocument xDocument;

        /// <summary>
        /// Initializes a new instance of the <see cref="Namespace"/> class.
        /// </summary>
        /// <param name="xDocument">The name of the namespace.</param>
        /// <param name="targetClassName">The target class name.</param>
        /// <param name="targetNamespace">The target module's namespace.</param>
        public Namespace(XDocument xDocument, string targetNamespace, string targetClassName)
        {
            // Initialize the object.
            this.xDocument = xDocument;
            this.targetClassName = targetClassName;
            this.targetNamespace = targetNamespace;

            // This is the syntax of the namespace.
            this.Syntax = SyntaxFactory.NamespaceDeclaration(
                    SyntaxFactory.IdentifierName(targetNamespace))
                .WithUsings(this.UsingStatements)
                .WithMembers(this.Members)
                .WithLeadingTrivia(this.LeadingTrivia);
        }

        /// <summary>
        /// Gets or sets gets the syntax.
        /// </summary>
        public NamespaceDeclarationSyntax Syntax
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the documentation comment.
        /// </summary>
        private SyntaxTriviaList LeadingTrivia
        {
            get
            {
                // The document comment trivia is collected in this list.
                List<SyntaxTrivia> trivia = new List<SyntaxTrivia>();

                // // <auto-generated />
                trivia.Add(
                    SyntaxFactory.Comment("// <auto-generated />"));

                // This is the complete document comment.
                return SyntaxFactory.TriviaList(trivia).NormalizeWhitespace();
            }
        }

        /// <summary>
        /// Gets the members.
        /// </summary>
        private SyntaxList<MemberDeclarationSyntax> Members
        {
            get
            {
                // Create the members.
                SyntaxList<MemberDeclarationSyntax> members = default(SyntaxList<MemberDeclarationSyntax>);
                members = this.CreatePublicClasses(members);
                return members;
            }
        }

        /// <summary>
        /// Gets the 'using' statements.
        /// </summary>
        private SyntaxList<UsingDirectiveSyntax> UsingStatements
        {
            get
            {
                // Collect the 'using' directives here.
                List<UsingDirectiveSyntax> usingStatements = new List<UsingDirectiveSyntax>();

                // Create the 'using' statements.
                usingStatements.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System.Diagnostics")));
                usingStatements.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System.Diagnostics.CodeAnalysis")));
                usingStatements.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System.Globalization")));
                usingStatements.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System.Reflection")));
                usingStatements.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System.Resources")));
                usingStatements.Add(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System.Runtime.CompilerServices")));

                // Complete set of 'using' directives.
                return SyntaxFactory.List(usingStatements);
            }
        }

        /// <summary>
        /// Creates the classes.
        /// </summary>
        /// <param name="members">The collection of members.</param>
        /// <returns>The collection of members augmented with the classes.</returns>
        private SyntaxList<MemberDeclarationSyntax> CreatePublicClasses(SyntaxList<MemberDeclarationSyntax> members)
        {
            // The actual data model class.
            members = members.Add(new Class.Class(this.xDocument, this.targetNamespace, this.targetClassName).Syntax);

            // This is the collection of alphabetized fields.
            return members;
        }
    }
}